<div id="starfield" class="absolute inset-0">
  <canvas id="starfield-canvas"></canvas>
</div>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 2001;
  const SPEED = 0.03;

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;
    colorFactor: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
      this.colorFactor = Math.random();
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D, primaryColor: string, secondaryColor: string) {
      ctx.lineWidth = this.z;

      // Simple interpolation between primary and secondary color based on colorFactor
      const color = interpolateColor(primaryColor, secondaryColor, this.colorFactor);
      ctx.strokeStyle = color;

      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  // Function to interpolate between two colors (assuming hex or rgba format)
  function interpolateColor(color1: string, color2: string, factor: number) {
    const c1 = parseColor(color1);
    const c2 = parseColor(color2);

    const result = c1.map((c, i) => Math.round(c + factor * (c2[i] - c)));

    if (color1.startsWith('rgba')) {
      return `rgba(${result.join(',')})`;
    } else {
      return `rgb(${result.slice(0, 3).join(',')})`;
    }
  }

  function parseColor(color: string): number[] {
    if (color.startsWith('#')) {
      return [
        parseInt(color.substring(1, 3), 16),
        parseInt(color.substring(3, 5), 16),
        parseInt(color.substring(5, 7), 16),
        255 // Assume opaque if hex
      ];
    } else if (color.startsWith('rgba')) {
      return color.substring(5, color.length - 1).split(',').map(c => parseFloat(c.trim()) * (c.includes('.') ? 255 : 1));
    } else if (color.startsWith('rgb')) {
       return color.substring(4, color.length - 1).split(',').map(c => parseInt(c.trim()));
    }
    return [0, 0, 0, 0]; // Default to transparent black
  }

  const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
  let rafId = 0;

  const canvas = document.querySelector(
    "#starfield-canvas"
  ) as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#starfield") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    const primaryColor = getComputedStyle(container).getPropertyValue('--color-primary').trim() || 'white';
    const secondaryColor = getComputedStyle(container).getPropertyValue('--color-secondary').trim() || 'white';
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    for (const star of stars) {
      star.x = Math.random() * width - width / 2;
      star.y = Math.random() * height - height / 2;
      star.z = Math.random();
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(0, 0, 0, 0.022)";

    rafId = requestAnimationFrame(frame);

    // Store colors for frame function
    (ctx as any).primaryColor = primaryColor;
    (ctx as any).secondaryColor = secondaryColor;
  }

  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    for (const star of stars) { // Pass colors to draw method
      star.update(width, height, SPEED); // Use stored colors in draw method
      star.draw(ctx, (ctx as any).primaryColor, (ctx as any).secondaryColor);
    }

    ctx.fillRect(-width / 2, -height / 2, width, height);
    rafId = requestAnimationFrame(frame);
  }
</script>
